#!/bin/bash
# bthinkfo
# CPU frequency, temperature and fan speed monitoring script for ThinkPad laptops - written in bash.
# https://github.com/bryancandi/cpu_scripts.git
#
# Copyright (C) 2024 by Bryan Candiliere
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

version="bthinkfo 0.0.5" # 08-29-2024

num="2"     #Default to 2 second refresh interval
tunit=""    #Default to Celsius temperature unit

show_help() {
    echo "Usage: $0 [options]"
    echo -e "This script displays CPU frequency, temperature and fan speed on ThinkPad laptops. \nValues are updated at a user specified time interval.\n"
    echo "Options:"
    echo "  -h, --help    Display this help message"
    echo "  -a, --ask     Display time and unit prompts"
    echo "  -c            Show temperatures in degrees Celsius"
    echo "  -f            Show temperatures in degrees Fahrenheit"
    echo "  -t, --time    Specify refresh interval in seconds"
    echo "  -v, --version Display script version"
}

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')    set -- "$@" '-h'   ;;
    '--ask')     set -- "$@" '-a'   ;;
    '--time')    set -- "$@" '-t'   ;;
    '--version') set -- "$@" '-v'   ;;
    *)           set -- "$@" "$arg" ;;
  esac
done

while getopts ":hacft:v" option; do
    case "${option}" in
        h)
            show_help
            exit 0
            ;;
        a)
            while true; do
                echo "Please enter desired update interval in seconds: "
                read num
                if [[ "$num" =~ ^[0-9]+$ ]] && [[ "$num" != 0 ]]; then
                    break
                else
                    echo "Invalid input. Please enter a positive whole number."
                fi
            done

            while true; do
                echo "Display temperatures in Celsius or Fahrenheit? Please enter C or F: "
                read unit
                if [[ "$unit" =~ ^[F,f]$ ]]; then
                    tunit="-f"
                    break
                elif [[ "$unit" =~ ^[C,c]$ ]]; then
                    tunit=""
                    break
                else
                    echo "Invalid input. Please enter either C or F."
                fi
            done
            ;;
        c)
            tunit=""
            ;;
        f)
            tunit="-f"
            ;;
        t | time)
            num="$OPTARG"
            if [[ "$num" =~ ^[0-9]+$ ]] && [[ "$num" != 0 ]]; then
                num="$OPTARG"
            else
                echo "Invalid input: $OPTARG. Please enter a positive whole number."
                exit 1
            fi
            ;;
        v)
            echo "${version}"
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            show_help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            echo "Try 'bthinkfo -h' for more information."
            #show_help
            exit 1
            ;;
    esac
done

trap ctrl_c INT

ctrl_c() {
    echo -e "\nExiting..."
    exit
}

f_model() {
    if [[ -d /system/app/ && -d /system/priv-app ]]; then
        model="$(getprop ro.product.brand) $(getprop ro.product.model)"
    elif [[ -f /sys/devices/virtual/dmi/id/product_name ||
        -f /sys/devices/virtual/dmi/id/product_version ]]; then
        model=$(< /sys/devices/virtual/dmi/id/product_name)
        model+=" $(< /sys/devices/virtual/dmi/id/product_version)"
    elif [[ -f /sys/firmware/devicetree/base/model ]]; then
        model=$(< /sys/firmware/devicetree/base/model)
    elif [[ -f /tmp/sysinfo/model ]]; then
        model=$(< /tmp/sysinfo/model)
    fi
}

f_cpu_type() {
    cpu_type=$(grep -i -m1 "model name" < /proc/cpuinfo | sed -nr '/[Mm]odel name/ s/.*:\s*(.*) @ .*/\1/p')
    if [ -z "$cpu_type" ]; then
        cpu_type="" #remove line completely if var is empty
    else
        cpu_type+="\n"
    fi

    cpu_type_alt=$(grep -i -m1 "model name" < /proc/cpuinfo | sed -e 's/[Mm]odel name.*: //' | sed -e 's/  */ /g') #alternate method - not used
    cpu_type_lscpu=$(lscpu | sed -nr '/Model name/ s/.*:\s*(.*) @ .*/\1/p') #alternate method - lscpu - not used
    load_avg=$(awk '{print $1", " $2", " $3}' < /proc/loadavg)
}

f_cpu_freq() {
    cpu_scaling_freq=$(lscpu | grep -i "mhz" | sed -e 's/   */  /g')
    if [ -z "$cpu_scaling_freq" ]; then
        cpu_scaling_freq="" #remove line completely if var is empty
    else
        cpu_scaling_freq+="\n"
     fi

    cpu_core_freq=$(awk '/MHz/{ temp+=$4; n++ } END{ printf("CPU MHz:  " "%.4f\n", temp/n) }' /proc/cpuinfo)
    if [ -z "$cpu_core_freq" ]; then
        cpu_core_freq="" #remove line completely if var is empty
    else
        cpu_core_freq+="\n"
    fi
}

f_sensors() {
    if [[ -f /bin/sensors || -f /usr/bin/sensors ]]; then
        thinkpad_sensors=$(sensors $tunit thinkpad-isa-0000 | grep -i -e "cpu" -e "gpu" | sed -e 's/   */  /g')
    else
        thinkpad_sensors=$"Sensors not found! \nIs \`lm-sensors\` package installed?"
    fi
}

f_acpi_ibm_fan() {
    if [[ -f /proc/acpi/ibm/fan ]]; then
        thinkpad_fan=$(awk '{print "Fan "$1"  "$2}' /proc/acpi/ibm/fan)
    elif [[ -f /bin/sensors || -f /usr/bin/sensors ]]; then
        thinkpad_fan_sensor=$(sensors $tunit thinkpad-isa-0000 | grep -i "fan" | sed -e 's/  */ /g')
        thinkpad_fan=${thinkpad_fan_sensor^}
    else
        thinkpad_fan="Fan sensor not found! \nAre \`thinkpad-acpi\` and \`lm-sensors\` packages installed?"
    fi
}

while :; do

    f_model
    f_cpu_type
    f_cpu_freq
    f_sensors
    f_acpi_ibm_fan

    output=$(clear
    #uname -sorp
    echo "---Model-------------------------------------------"
    echo "${model}"
    echo -e -n "${cpu_type}"
    echo "---------------------------------------------------"
    echo
    echo "---Load Average------------------------------------"
    echo "$load_avg"
    echo "---------------------------------------------------"
    echo
    echo "---Frequency---------------------------------------"
    echo -e -n "$cpu_scaling_freq"
    echo -e -n "$cpu_core_freq"
    echo "---------------------------------------------------"
    echo
    echo "---Sensors-----------------------------------------"
    echo -e "${thinkpad_sensors}"
    echo -e "${thinkpad_fan}"
    echo "---------------------------------------------------"
    echo -e "\nUpdating every $num second(s). (Press 'Q' to quit)")
    echo "$output"
    #sleep "$num"
    read -t "$num" -r -s -n 1 key
    if [ "$key" = "q" ] || [ "$key" = "Q" ]; then
        break
    fi
done
